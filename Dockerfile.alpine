# Use Alpine-based Go image
FROM golang:1.21.3-alpine3.17 as gobuild

# Set the working directory
WORKDIR /build
ADD . /build

# Alpine doesn't have many of the basic tools installed. We'll add them.
RUN apk add --no-cache git gcc g++ libc-dev

# Fetch the dependencies
RUN go get -d -v ./...

# Build the application
RUN GOOS=linux go build -a -ldflags '-extldflags "-static"' -o ./s3driver ./cmd/s3driver

# Continue with your s3backer build on Debian
FROM debian:bullseye-slim as s3backer
ARG S3BACKER_VERSION=2.1.1

RUN apt-get update && apt-get install -y \
    build-essential \
    autoconf \
    libcurl4-openssl-dev \
    libfuse-dev \
    libexpat1-dev \
    libssl-dev \
    zlib1g-dev \
    psmisc \
    pkg-config \
    git && \
    rm -rf /var/lib/apt/lists/*

# Compile & install s3backer
RUN git clone https://github.com/archiecobbs/s3backer.git /src/s3backer
WORKDIR /src/s3backer
RUN git checkout tags/${S3BACKER_VERSION}

RUN ./autogen.sh && \
    ./configure && \
    make && \
    make install

FROM debian:buster-slim
COPY --from=s3backer /usr/bin/s3backer /usr/bin/s3backer

# s3fs and some other dependencies
RUN apt-get update && \
    apt-get install -y \
    libfuse2 gcc sqlite3 libsqlite3-dev \
    s3fs psmisc procps libcurl4 xfsprogs curl unzip && \
    rm -rf /var/lib/apt/lists/*

# Install rclone
ARG RCLONE_VERSION=v1.64.2
RUN cd /tmp \
    && curl -O https://downloads.rclone.org/${RCLONE_VERSION}/rclone-${RCLONE_VERSION}-linux-amd64.zip \
    && unzip /tmp/rclone-${RCLONE_VERSION}-linux-amd64.zip \
    && mv /tmp/rclone-*-linux-amd64/rclone /usr/bin \
    && rm -r /tmp/rclone*

# Copy the Go-built binary to the final image
COPY --from=gobuild /build/s3driver /s3driver

ENTRYPOINT ["/s3driver"]